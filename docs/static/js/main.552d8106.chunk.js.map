{"version":3,"sources":["components/AddCategory.js","components/GifGriditem.js","helpers/GetGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototype","PropTypes","func","isRequired","GifGriditem","img","className","src","url","alt","title","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","id","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","Category","string","GitExpertApp","categories","divRoot","document","querySelector","ReactDOM","render"],"mappings":"iQAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGZC,mBAAS,IAHG,mBAGzCC,EAHyC,KAG7BC,EAH6B,KAiB5C,OACI,0BAAMC,SATO,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,OAMV,2BACIO,KAAM,OACNC,MAAST,EACTU,SAjBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,YAuB3BZ,EAAYe,UAAW,CACnBd,cAAgBe,IAAUC,KAAKC,YC/B5B,IAAMC,EAAc,SAAEC,GAEzB,OACI,yBAAKC,UAAW,yCAER,yBAAKC,IAAKF,EAAIG,IAAKC,IAAKJ,EAAIK,QAC5B,+BAAKL,EAAIK,S,uBCLZC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbL,EADa,0DAC8CM,UAAUF,GADxD,sDAEAG,MAAMP,GAFN,cAEbQ,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAf,GAAO,IAAD,EAExB,MAAO,CACHgB,GAAIhB,EAAIgB,GACRX,MAAQL,EAAIK,MACZF,IAAG,UAAEH,EAAIiB,cAAN,aAAE,EAAYC,iBAAiBf,QATvB,kBAaZW,GAbY,4CAAH,sDCIPK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECJX,SAACA,GAAY,IAAD,EAGVzB,mBAAS,CAC/B+B,KAAO,GACPO,SAAS,IALuB,mBAG7BC,EAH6B,KAGtBC,EAHsB,KAepC,OAPAC,qBAAU,WACNjB,EAAQC,GAAUiB,MAAM,SAAAC,GAAI,OAAIH,EAAS,CACrCT,KAAMY,EACNL,SAAS,SAGd,CAACb,IACGc,EDRwBK,CAAanB,GAAhCU,EAHuB,EAG5BJ,KAAaO,EAHe,EAGfA,QAEpB,OAEI,oCACA,gCAAMb,GACLa,GAAW,uCACZ,yBAAKnB,UAAU,aAGPgB,EAAOF,KAAI,SAAAf,GAAG,OACV,kBAAC,EAAD,eACI2B,IAAO3B,EAAIgB,IACPhB,UAW5BmB,EAAQxB,UAAY,CAChBiC,SAAWhC,IAAUiC,OAAO/B,YE/BhC,IA0BegC,EA1BM,WAAM,IAAD,EACehD,mBAAS,CAAC,cAAc,iBADvC,mBACdiD,EADc,KACFlD,EADE,KAEtB,OACI,oCACI,8CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEQkD,EAAWhB,KAAI,SAAAR,GAAQ,OACnB,kBAAC,EAAD,CAEAoB,IAAOpB,EACPA,SAAYA,UCZ9ByB,EAAWC,SAASC,cAAc,SAExCC,IAASC,OAAQ,kBAAC,EAAD,MAAiBJ,K","file":"static/js/main.552d8106.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n\n\nconst [inputValue, setinputValue] = useState('')\n\nconst handleInputCahnge = (e)=>{\n    setinputValue(e.target.value)\n}\n\nconst handleSubmit = (e)=>{\n    e.preventDefault();\n    if (inputValue.trim().length > 2 ){\n        setCategories(cats => [ inputValue, ...cats]);\n        setinputValue('');\n    }\n     \n}\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type =\"text\"\n                value = {inputValue}\n                onChange = {handleInputCahnge}\n            />\n        </form>\n    )\n}\n\n\nAddCategory.prototype ={\n    setCategories : PropTypes.func.isRequired\n}","import React from 'react'\n\nexport const GifGriditem = ( img ) => {\n    //console.log(img)\n    return (\n        <div className =\"card animate_animated animated_fadeIn\"> \n                \n                <img src={img.url} alt={img.title}/>\n                <p> {img.title}</p>\n        </div>\n    )\n}\n","\n\n\nexport const getGifs = async(category) =>{\n    const url  =  `https://api.giphy.com/v1/gifs/search?limit=10&q=${encodeURI(category)}&api_key=myLRdfV0qeh9pdmEltGo1hWbQuU7CvPx`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    const gifs = data.map(img =>{\n\n        return {\n            id :img.id,\n            title : img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs\n}","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { GifGriditem } from './GifGriditem'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\n\n\nexport const GifGrid = ({category}) => {\n\n\n    const {data:images, loading} = useFetchGifs(category);\n\n    return (\n\n        <>\n        <h3> {category}</h3>\n        {loading && <p> loading</p>}\n        <div className=\"card-grid\">\n            \n            {\n                images.map(img =>(\n                    <GifGriditem  \n                        key = {img.id}\n                        {...img}\n\n                    />\n                ))\n            }\n        </div>\n        </>\n    )\n}\n\n\nGifGrid.prototype = {\n    Category : PropTypes.string.isRequired\n}","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/GetGifs\";\n\nexport const useFetchGifs = (category)=>{\n    \n\n    const [state, setstate] = useState({\n        data : [],\n        loading: true\n    });\n\n    useEffect(() => { // Solo se dispara cuando cambia la categoria\n        getGifs(category).then( imgs => setstate({\n            data: imgs,\n            loading: false\n        }))\n\n    }, [category])\n    return state \n}","import React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GitExpertApp = () =>{\n    const  [categories, setCategories] = useState(['Dragon Ball','Looney tunes'])\n    return (\n        <>\n            <h2>Git expert app</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n            \n            <ol>\n                {\n                    categories.map(category =>(\n                        <GifGrid \n\n                        key = {category}\n                        category = {category}\n\n                        />\n                    ))\n\n                }\n            </ol>\n        </>\n    );\n}\n\n\nexport default GitExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GitExpertApp from './GitExpertApp';\n\n\nconst divRoot  = document.querySelector(\"#root\")\n\nReactDOM.render( <GitExpertApp/>, divRoot)"],"sourceRoot":""}